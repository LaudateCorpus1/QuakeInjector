plugins {
    id 'java'
    id 'eclipse'
    id 'application'
//    id 'com.palantir.graal' version '0.9.0'
    id "com.github.spotbugs" version "4.7.1"
    id 'edu.sc.seis.launch4j' version '2.5.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'edu.stanford.ejalbert:BrowserLauncher2:1.3'
}

application {
    mainClassName = 'de.haukerehfeld.quakeinjector.QuakeInjector'
}

jar {
    manifest {
        attributes["Main-Class"] = application.mainClassName
    }
}

//graal {
//    javaVersion "11"
//    graalVersion "21.1.0"
//    outputName "quake-injector"
//    mainClass application.mainClassName
//    option "--no-fallback"
//    option "--verbose"
//}

task readCommit(type: WriteProperties) {
    outputFile = file("${buildDir}/build-info.properties")
    comment = "Revision name"
    property("quake-injector.build-commit", "git describe --tags".execute().text.trim())
}

launch4j {
    mainClassName = application.mainClassName
    icon = "${projectDir}/src/main/resources/Inject2.ico"
    bundledJrePath "./runtime"
    bundledJre64Bit false
}

processResources {
    from(readCommit)
}

task downloadJre {
    def targetDir = "$buildDir/jre"
    def f = new File("$buildDir/jre.zip")
    f.parentFile.mkdir()
    if (!f.exists()) {
        new URL('https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10_openj9-0.26.0/OpenJDK8U-jre_x86-32_windows_openj9_8u292b10_openj9-0.26.0.zip').withInputStream {i -> f.withOutputStream {it << i}}
    }

    copy {
        from zipTree("$buildDir/jre.zip")
        into(targetDir)
        fileMode 0777
        dirMode 0777
    }
}

task setupWinDist(type: Copy) {
    dependsOn("createExe", "downloadJre")
    group "distribution"
    def targetDir = "$buildDir/winDist"
    mkdir(targetDir)
    File jreDir
    doLast {
        copy {
            file("$buildDir/jre").eachDir {
                if (it.name.contains("jre")) {
                    jreDir = it
                }
            }
            if (jreDir) {
                from(jreDir)
                into("$targetDir/runtime")
            }
        }
    }
    from("$buildDir/launch4j")
    into(targetDir)
}

task winDist(type: Zip) {
    dependsOn "setupWinDist"
    group "distribution"
    def distDir = "$buildDir/winDist"
    from "$distDir"
    destinationDir = file("$buildDir/distributions")
    archiveFileName = "QuakeInjector-exe.zip"
    exclude("*-jre")

}
test {
    useJUnitPlatform()
}
